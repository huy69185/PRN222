@page
@model ClassroomBooking.Presentation.Pages.Manager.IndexModel
@{
    ViewData["Title"] = "Manage Bookings";
}

<div class="container py-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0"><i class="bi bi-calendar-check me-2"></i>Manage Bookings</h2>
        </div>
        <div class="card-body p-4">
            <!-- Create Booking Button (for non-managers) -->
            @if (!User.IsInRole("Manager"))
            {
                <div class="d-flex justify-content-end mb-3">
                    <a asp-page="/Bookings/Create" class="btn btn-success btn-lg">
                        <i class="bi bi-plus-circle me-2"></i>Create Booking
                    </a>
                </div>
            }

            <!-- Search Filters -->
            <div class="row mb-4 g-3">
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="text" id="studentSearch" class="form-control" placeholder="Search by Student" />
                        <label for="studentSearch">Search by Student</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="text" id="roomSearch" class="form-control" placeholder="Search by Room" />
                        <label for="roomSearch">Search by Room</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <select id="statusFilter" class="form-select">
                            <option value="">All Statuses</option>
                            <option value="Pending">Pending</option>
                            <option value="Approved">Approved</option>
                            <option value="Denied">Denied</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                        <label for="statusFilter">Filter by Status</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="text" id="purposeSearch" class="form-control" placeholder="Search by Purpose" />
                        <label for="purposeSearch">Search by Purpose</label>
                    </div>
                </div>
            </div>

            <!-- Error Messages -->
            @if (Model.ModelState.ErrorCount > 0)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @foreach (var error in Model.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <p>@error.ErrorMessage</p>
                    }
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <!-- Bookings Table -->
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle" id="bookingsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Student</th>
                            <th>Room</th>
                            <th>Seat Booked</th>
                            <th>Start Time</th>
                            <th>End Time</th>
                            <th>Status</th>
                            <th>Purpose</th>
                            <th>Approve/Deny</th>
                            <th>Created Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var booking in Model.BookingList)
                        {
                            <tr data-status="@booking.BookingStatus">
                                <td>@booking.BookingId</td>
                                <td>@booking.User?.FullName</td>
                                <td>
                                    @foreach (var rs in booking.RoomSlots)
                                    {
                                        @rs.Room?.RoomName
                                    }
                                </td>
                                <td>
                                    @foreach (var rs in booking.RoomSlots)
                                    {
                                        @( rs.SeatsBooked)
                                    }
                                </td>
                                <td>@booking.StartTime.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@booking.EndTime.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>
                                    <span class="@(booking.BookingStatus == "Pending" ? "text-warning" : booking.BookingStatus == "Approved" ? "text-success" : booking.BookingStatus == "Denied" ? "text-danger" : booking.BookingStatus == "Cancelled" ? "text-orangered" : "")">
                                        @booking.BookingStatus
                                    </span>
                                </td>
                                <td>@booking.Purpose</td>
                                <td>
                                    <form method="post" asp-page-handler="UpdateStatus" class="d-inline">
                                        <input type="hidden" name="bookingId" value="@booking.BookingId" />
                                        <button type="submit" name="bookingStatus" value="Approved" class="btn btn-success btn-sm"
                                        @(booking.BookingStatus == "Pending" ? "" : "disabled")>
                                            <i class="bi bi-check-circle me-1"></i>Approve
                                        </button>
                                        <button type="submit" name="bookingStatus" value="Denied" class="btn btn-danger btn-sm"
                                        @(booking.BookingStatus == "Pending" ? "" : "disabled")>
                                            <i class="bi bi-x-circle me-1"></i>Deny
                                        </button>
                                    </form>
                                </td>
                                <td>@booking.CreatedDate.ToString("yyyy-MM-dd HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div>
                    <p class="mb-0">Page @Model.CurrentPage of @Model.TotalPages</p>
                </div>
                <div>
                    <nav aria-label="Page navigation">
                        <ul class="pagination mb-0">
                            <li class="page-item @(Model.CurrentPage > 1 ? "" : "disabled")">
                                <a class="page-link" asp-page="/Manager/Index" asp-route-pageNumber="@(Model.CurrentPage - 1)">
                                    <i class="bi bi-arrow-left"></i> Previous
                                </a>
                            </li>
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" asp-page="/Manager/Index" asp-route-pageNumber="@i">@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.CurrentPage < Model.TotalPages ? "" : "disabled")">
                                <a class="page-link" asp-page="/Manager/Index" asp-route-pageNumber="@(Model.CurrentPage + 1)">
                                    Next <i class="bi bi-arrow-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        border-radius: 10px;
        overflow: hidden;
    }

    .card-header {
        padding: 1.5rem;
    }

    .btn {
        transition: all 0.3s ease;
    }

        .btn:hover {
            transform: translateY(-2px);
        }

    .table-responsive {
        border-radius: 8px;
        overflow: hidden;
    }


    .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }

    .form-floating > label {
        color: #666;
    }

    .form-control:focus, .form-select:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
    }

    .text-orangered {
        color: orangered;
    }
</style>

@section Scripts {
    <script>
        // Search and Filter functionality
        (function () {
            const studentSearch = document.getElementById('studentSearch');
            const roomSearch = document.getElementById('roomSearch');
            const statusFilter = document.getElementById('statusFilter');
            const purposeSearch = document.getElementById('purposeSearch');
            const table = document.getElementById('bookingsTable');
            const rows = table.querySelectorAll('tbody tr');

            function searchAndFilter() {
                const studentText = studentSearch.value.toLowerCase();
                const roomText = roomSearch.value.toLowerCase();
                const selectedStatus = statusFilter.value.toLowerCase();
                const purposeText = purposeSearch.value.toLowerCase();

                rows.forEach(row => {
                    const student = row.cells[1].textContent.toLowerCase();
                    const room = row.cells[2].textContent.toLowerCase();
                    const status = row.getAttribute('data-status').toLowerCase();
                    const purpose = row.cells[6].textContent.toLowerCase();

                    // Kiểm tra điều kiện tìm kiếm và lọc
                    const matchesStudent = studentText === '' || student.includes(studentText);
                    const matchesRoom = roomText === '' || room.includes(roomText);
                    const matchesStatus = selectedStatus === '' || status === selectedStatus;
                    const matchesPurpose = purposeText === '' || purpose.includes(purposeText);

                    // Hiển thị hoặc ẩn hàng
                    if (matchesStudent && matchesRoom && matchesStatus && matchesPurpose) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }

            // Gắn sự kiện cho các input và select
            studentSearch.addEventListener('input', searchAndFilter);
            roomSearch.addEventListener('input', searchAndFilter);
            statusFilter.addEventListener('change', searchAndFilter);
            purposeSearch.addEventListener('input', searchAndFilter);

            // Gọi hàm lần đầu để áp dụng filter mặc định (nếu có)
            searchAndFilter();
        })();
    </script>
}